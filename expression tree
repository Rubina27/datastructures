#include<stdio.h>
#include <math.h>
#include <stdlib.h>
#include <ctype.h>

struct node
{
	char info;
	struct node *llink;
	struct node *rlink;
};
typedef struct node* NODE;


NODE getnode()
{
    NODE x;

    x = malloc(sizeof(struct node));
    if(x == NULL)
    {
        printf("Memory allocation error\n");
        return NULL;
    }

    return x;
}


NODE create_tree(char postfix[])
{
	NODE temp, st[20];
	int i,k;
	char symbol;
	k = 0;

	for(i=0; (symbol)==(postfix[i])!='\0'; i++)
	{
		temp = getnode();
		temp->info = symbol;
		temp->rlink = temp->llink = NULL;

		if(isdigit(symbol))
			st[k++] = temp;

		else
		{
			temp->rlink = st[--k];
			temp->llink = st[--k];
			st[k++] = temp;

		}
	}

	return st[--k];
}



void pre_order(NODE root)
{
    if(root != NULL)
    {
        printf("%d\n",root->info);
        
        pre_order(root->llink);
        pre_order(root->rlink);
    }
}




float eval(NODE root)
{
	float num;

	switch(root->info)
	{
		case '+':
			return eval(root->llink) + eval(root->rlink);

		case '-':
			return eval(root->llink) - eval(root->rlink);

		case '*':
			 return eval(root->llink) - eval(root->rlink);

		case '/':
			 return eval(root->llink) / eval(root->rlink);

		case '$':
		case '^':
		 	return pow(eval(root->llink), eval(root->rlink));

		 default:
		 	if(isalpha(root->info))
		 	{
		 		printf("%c", root->info);
		 		scanf("%f",&num);
		 		return num;

		 	}

		 	else
		 		return root->info - '0';
	}
}


int main()
{
	int choice;
	NODE root = NULL;
	char postfix[20];
	float res=0;

    while(1)
    {
        printf("1. Create\n");

        printf("2. Evaluate\n");

        printf("3. display\n");

        scanf("%d",&choice);

        switch(choice)
        {
        	case 1:
        		printf("Enter a postfix expression: \n");
        		scanf("%s",&postfix);
        		root = create_tree(postfix);
        		break;

        	case 2:
        		res = eval(root);
        		break;

        	case 3:
        		pre_order(root);
        		break;
        }
    }
}
